
int [][] cartes = new int [16][12];
int [][][] tab = new int [8][9][3];

void cachecartes(int [][] cartes, int tab [][][]){
	for(int numero_carte=0;numero_carte<=7;numero_carte++){
	
	
		for(int case_carte=0;case_carte<=8;case_carte++){
			
			
				
				setPixel(tab[numero_carte][case_carte][0],tab[numero_carte][case_carte][2],"red");
				setPixel(tab[numero_carte][case_carte][0],tab[numero_carte][case_carte][1],"red");
		}}}

void randcartesbas(int [][] cartes){
	int test1 = random (1,8);
	
	int test2 = random (1,8);
		while(test2==test1){test2=random(0,8);}
			 
	int test3 = random (1,8);
		while(test3==test2||test3==test1){ test3 = random (0,8);}
			
	int test4 = random (1,8);
		while(test4==test3||test4==test2||test4==test1){test4 = random (0,8);}
			 
	int test5 = random (1,8);
		while(test5==test4||test5==test3||test5==test2||test5==test1){test5 = random (0,8);}
			 
	int test6 = random (1,8);
		while(test6==test5||test6==test4||test6==test3||test6==test2||test6==test1){test6 = random (0,8);}
			 
	int test7 = random (1,8);
		while(test7==test6||test7==test5||test7==test4||test7==test3||test7==test2||test7==test1){test7 = random (0,8);}
			 
	int test8 = random (1,8);
		while(test8==test7||test8==test6||test8==test5||test8==test4||test8==test3||test8==test2||test8==test1){test8 = random (0,8);}


			 for(int comp=0;comp<=11;comp++){
			 	cartes[8+test1][comp]=cartes[0][comp];
			 	cartes[8+test2][comp]=cartes[1][comp];
			 	cartes[8+test3][comp]=cartes[2][comp];
			 	cartes[8+test4][comp]=cartes[3][comp];
			 	cartes[8+test5][comp]=cartes[4][comp];
			 	cartes[8+test6][comp]=cartes[5][comp];
			 	cartes[8+test7][comp]=cartes[6][comp];
			 	cartes[8+test8][comp]=cartes[7][comp];
			 }
}

/*
void randcarteshaut(int [][] cartes){
	int test1 = random (1,8);
	
	int test2 = random (1,8);
		while(test2==test1){test2=random(0,8);}
			 
	int test3 = random (1,8);
		while(test3==test2||test3==test1){ test3 = random (0,8);}
			
	int test4 = random (1,8);
		while(test4==test3||test4==test2||test4==test1){test4 = random (0,8);}
			 
	int test5 = random (1,8);
		while(test5==test4||test5==test3||test5==test2||test5==test1){test5 = random (0,8);}
			 
	int test6 = random (1,8);
		while(test6==test5||test6==test4||test6==test3||test6==test2||test6==test1){test6 = random (0,8);}
			 
	int test7 = random (1,8);
		while(test7==test6||test7==test5||test7==test4||test7==test3||test7==test2||test7==test1){test7 = random (0,8);}
			 
	int test8 = random (1,8);
		while(test8==test7||test8==test6||test8==test5||test8==test4||test8==test3||test8==test2||test8==test1){test8 = random (0,8);}


			 for(int comp=0;comp<=11;comp++){
			 	cartes[8+test1][comp]=cartes[0][comp];
			 	cartes[8+test2][comp]=cartes[1][comp];
			 	cartes[8+test3][comp]=cartes[2][comp];
			 	cartes[8+test4][comp]=cartes[3][comp];
			 	cartes[8+test5][comp]=cartes[4][comp];
			 	cartes[8+test6][comp]=cartes[5][comp];
			 	cartes[8+test7][comp]=cartes[6][comp];
			 	cartes[8+test8][comp]=cartes[7][comp];
			 }
}*/
void affcartes2(int [][] cartes, int tab [][][]) {
	

			 for(int numero_carte=0;numero_carte<=7;numero_carte++){
	
	
		for(int case_carte=0;case_carte<=8;case_carte++){
			
			if (cartes[numero_carte +8][case_carte] == 0){
				
				setPixel(tab[numero_carte][case_carte][0],tab[numero_carte][case_carte][2],"white");
		} 
			else{
				
				setPixel(tab[numero_carte][case_carte][0],tab[numero_carte][case_carte][2],cartes[numero_carte+8][9],cartes[numero_carte+8][10],cartes[numero_carte+8][11]);
				//setPixel(tab[numero_carte][case_carte][0],tab[numero_carte][case_carte][2],cartes[numero_carte][9],cartes[numero_carte][10],cartes[numero_carte][11]);
				
			}
	
	
}
}
}

void affcartes(int [][] cartes,int [][][] tab){
	
for(int numero_carte=0;numero_carte<=7;numero_carte++){
	
	
		for(int case_carte=0;case_carte<=8;case_carte++){
			
			if (cartes[numero_carte][case_carte] == 0){
				
				setPixel(tab[numero_carte][case_carte][0],tab[numero_carte][case_carte][1],"white");
		} 
			else{
				int ka=random (1,8);
				setPixel(tab[numero_carte][case_carte][0],tab[numero_carte][case_carte][1],cartes[numero_carte][9],cartes[numero_carte][10],cartes[numero_carte][11]);
				//setPixel(tab[numero_carte][case_carte][0],tab[numero_carte][case_carte][2],cartes[numero_carte][9],cartes[numero_carte][10],cartes[numero_carte][11]);
				
			}
	
	
}
}
}
				void main()
{
 reset (8,8);

 for(int k=-8;k<=8;k++)
	{
	setPixel(-8,k,"black");
	setPixel(-4,k,"black");
	setPixel(0,k,"black");
	setPixel(4,k,"black");
	setPixel(8,k,"black");
	setPixel(k,8,"black");
	setPixel(k,4,"black");
	setPixel(k,0,"black");
	setPixel(k,-4,"black");
	setPixel(k,-8,"black");
	}

	
	
for (int numero_carte=0;numero_carte<=7;numero_carte++)
	{
	
	cartes [numero_carte][9]=random(1,225);
	cartes [numero_carte][10]=random(1,225);
	cartes [numero_carte][11]=random(1,225);
	for (int r=0;r<9;r++)
		{
		cartes[numero_carte][r] = random (0,2);
		}
	//setPixel(0,0, cartes [numero_carte][9],cartes [numero_carte][10],cartes [numero_carte][11]);
	}

for (int h=0;h<=6;h=h+3)
{
	tab[0][h][0]=-7;
	tab[4][h][0]=-7;
	tab[0][h+1][0]=-6;
	tab[4][h+1][0]=-6;
	tab[0][h+2][0]=-5;
	tab[4][h+2][0]=-5;
	
	tab[1][h][0]=-3;
	tab[5][h][0]=-3;
	tab[1][h+1][0]=-2;
	tab[5][h+1][0]=-2;
	tab[1][h+2][0]=-1;
	tab[5][h+2][0]=-1;
	
	tab[2][h][0]=1;
	tab[6][h][0]=1;
	tab[2][h+1][0]=2;
	tab[6][h+1][0]=2;
	tab[2][h+2][0]=3;
	tab[6][h+2][0]=3;
	
	tab[3][h][0]=5;
	tab[7][h][0]=5;
	tab[3][h+1][0]=6;
	tab[7][h+1][0]=6;
	tab[3][h+2][0]=7;
	tab[7][h+2][0]=7;
	
}
for (int u=0;u<=3;u++)
{
	tab[u][0][1]=7;
	tab[u][1][1]=7;
	tab[u][2][1]=7;
	tab[u][3][1]=6;
	tab[u][4][1]=6;
	tab[u][5][1]=6;
	tab[u][6][1]=5;
	tab[u][7][1]=5;
	tab[u][8][1]=5;
	tab[u+4][0][1]=3;
	tab[u+4][1][1]=3;
	tab[u+4][2][1]=3;
	tab[u+4][3][1]=2;
	tab[u+4][4][1]=2;
	tab[u+4][5][1]=2;
	tab[u+4][6][1]=1;
	tab[u+4][7][1]=1;
	tab[u+4][8][1]=1;

	tab[u][0][2]=-1;
	tab[u][1][2]=-1;
	tab[u][2][2]=-1;
	tab[u][3][2]=-2;
	tab[u][4][2]=-2;
	tab[u][5][2]=-2;
	tab[u][6][2]=-3;
	tab[u][7][2]=-3;
	tab[u][8][2]=-3;
	tab[u+4][0][2]=-5;
	tab[u+4][1][2]=-5;
	tab[u+4][2][2]=-5;
	tab[u+4][3][2]=-6;
	tab[u+4][4][2]=-6;
	tab[u+4][5][2]=-6;
	tab[u+4][6][2]=-7;
	tab[u+4][7][2]=-7;
	tab[u+4][8][2]=-7;
	
	randcartesbas(cartes);
}
	for (int k=0;k<=0;k++){
	 int choix = readInt("1 = cacher / 2 = montrer");
	 
		if (choix == 1){cachecartes(cartes,tab);}
		
			else if(choix == 2){
				affcartes(cartes,tab);
				affcartes2(cartes,tab);
			}
	}		
}					
